@using WebApplication.Models.Application;
@using WebApplication.Attributes;
@model WebApplication.Models.Application.Batch
@{
    ViewBag.Title = "Batches";
    ViewBag.SubTitle = "";
    var id = ViewContext.RouteData.Values["id"];
}


@section submenu {left-sidebar-menu-batch-create}

<div class="row">
    <div class="col-md-6">
        <div class="box box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">
                    @if (id == null)
                {<span>Create New</span>}
                else
                {<span>Edit</span>} Conference Batch
            </h3>
        </div>

        @if (@ViewBag.Message != null)
            {
            <div class="box-body">
                <div class="alert alert-danger alert-dismissible">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                    <h4><i class="icon fa fa-ban"></i> Alert!</h4>

                    <p>
                        @ViewBag.Message
                    </p>

                </div>
            </div>
        }

        @using (Html.BeginForm("Create", "Batch", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <div class="box-body">

                @Html.ValidationSummary(true)

                @if (id != null)
                {
                    @Html.HiddenFor(model => model.Id)
                }

                @Html.HiddenFor(model => model.UserId)
                @Html.HiddenFor(model => model.Date)
                @Html.HiddenFor(model => model.Status)

                @if (id == null)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModelId, new { @class = "" })
                        @Html.DropDownListFor(x => x.ModelId, (SelectList)ViewBag.Models, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.ModelId)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Quantity, new { @class = "" })
                        @Html.EditorFor(x => x.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Quantity)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.QuantityConferred, new { @class = "" })
                        @Html.EditorFor(x => x.QuantityConferred, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.QuantityConferred)
                    </div>

                }
                else
                {

                    <div class="form-group">
                        @Html.LabelFor(model => model.ModelId, new { @class = "" })<br />
                        @Html.DisplayFor(model => model.Model.Name)
                        @Html.HiddenFor(model => model.ModelId)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Quantity, new { @class = "" })<br />
                        @Html.DisplayFor(model => model.Quantity)
                        @Html.HiddenFor(model => model.Quantity)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.QuantityConferred, new { @class = "" })<br />
                        @Html.DisplayFor(model => model.QuantityConferred)
                        @Html.HiddenFor(model => model.QuantityConferred)
                    </div>

                    if (Model.Status != BatchStatus.PendingReview)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.QuantityApproved, new { @class = "" })
                            @Html.EditorFor(x => x.QuantityApproved, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.QuantityApproved)
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.QuantityDisapproved, new { @class = "" })
                            @Html.EditorFor(x => x.QuantityDisapproved, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.QuantityDisapproved)
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.QuantityDisapprovedByCosmetic, new { @class = "" })
                            @Html.EditorFor(x => x.QuantityDisapprovedByCosmetic, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.QuantityDisapprovedByCosmetic)
                        </div>
                    }
                }

            </div>

            <div class="box-footer">
                <div class="box-btn-group">
                    <span class="pull-left">
                        @if (id != null)
                        {
                            //MÉTODO ANTIGO, QUE REDIRECIONAVA PARA A VIEW "AsPdf", porém está dando erro

                            @*<a id="printAgreement" href="@Url.Action("AsPdf", "Batch", new { id = @Model.Id})" target="_blank" class="btn btn-default">
                        <i class="fa fa-file-pdf-o"></i> Print Agreement Doc
                    </a>*@


                            <a id="printAgreement" href="@Url.Action("BatchReport", "Batch", new { id = @Model.Id})" class="btn btn-default">
                                <i class="fa fa-file-pdf-o"></i> Print Agreement Doc
                            </a>
                        }
                    </span>

                    <span class="pull-right">
                        @if (Model.Status == BatchStatus.Tested)
                        {
                            <span>There is no action allowed on a testes bacth</span>
                        }
                        else if (Model.Status == BatchStatus.PendingReview && id != null)
                        {
                            @*<input id="confirmAgreement" type="submit" value="Send back to conference" class="btn btn-danger" />*@

                            if (User.HasPermissions("Batch", "Write"))
                            {
                                <input id="confirmAgreement" type="submit" value="I agree with this batch conference" class="btn btn-success" />
                            }
                        }
                        else if (id == null)
                        {
                            if (User.HasPermissions("Batch", "Write"))
                            {
                                <input type="submit" value="Create Batch" class="btn btn-success pull-right" />
                            }
                        }
                        else
                        {
                            if (User.HasPermissions("Batch", "Write"))
                            {
                                <input type="submit" value="Finish Conference" class="btn btn-success pull-right" />
                            }
                        }
                    </span>
                    <span class="clearfix"></span>
                </div>


                @Html.ActionLink("Go Back", "Index", new { }, new { @class = "btn btn-default" })

               

            </div>

        }
    </div>
</div>
</div>



@section Scripts {
    <script>
        function show(input) {
            if (input.files && input.files[0]) {
                var filerdr = new FileReader();
                filerdr.onload = function (e) {
                    $('#user_img').attr('src', e.target.result);
                }
                filerdr.readAsDataURL(input.files[0]);
            }
        }

        $(function () {
            //Initialize Select2 Elements
            $('.select2').select2();

            //Datemask dd/mm/yyyy
            $('#datemask').inputmask("dd/mm/yyyy", { "placeholder": "dd/mm/yyyy" });
            //Datemask2 mm/dd/yyyy
            $('#datemask2').inputmask("mm/dd/yyyy", { "placeholder": "mm/dd/yyyy" });
            //Money Euro
            $("[data-mask]").inputmask();

            //Date range picker
            $('#reservation').daterangepicker();
            //Date range picker with time picker
            $('#reservationtime').daterangepicker({ timePicker: true, timePickerIncrement: 30, format: 'MM/DD/YYYY h:mm A' });
            //Date range as a button
            $('#daterange-btn').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
                }
            );

            //iCheck for checkbox and radio inputs
            $('input[type="checkbox"].minimal, input[type="radio"].minimal').iCheck({
                checkboxClass: 'icheckbox_minimal-blue',
                radioClass: 'iradio_minimal-blue'
            });
            //Red color scheme for iCheck
            $('input[type="checkbox"].minimal-red, input[type="radio"].minimal-red').iCheck({
                checkboxClass: 'icheckbox_minimal-red',
                radioClass: 'iradio_minimal-red'
            });
            //Flat red color scheme for iCheck
            $('input[type="checkbox"].flat-red, input[type="radio"].flat-red').iCheck({
                checkboxClass: 'icheckbox_flat-green',
                radioClass: 'iradio_flat-green'
            });

            //Colorpicker
            $(".my-colorpicker1").colorpicker();
            //color picker with addon
            $(".my-colorpicker2").colorpicker();

            //Timepicker
            $(".timepicker").timepicker({
                showInputs: false
            });


            ///**
            // *  feature for agreement buttons rules
            //    **/
            //printAgreementDisplayStrategy = function ($ev) {
            //    $(this).hide(0);

            //    var $confirm = $('#confirmAgreement');
            //    if (!$confirm.is(':visible')) {
            //        $confirm.show(0);
            //    }
            //};
            //$(document)
            //    .on('click.agreements', 'a#printAgreement', printAgreementDisplayStrategy)
        });




    </script>
}
