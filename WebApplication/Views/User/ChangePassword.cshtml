@using WebApplication.Attributes

@using WebApplication.Models;
@model WebApplication.Models.AdminChangePasswordViewModel
@{
    ViewBag.Title = "User";
    ViewBag.SubTitle = "Change Password";
    var id = ViewContext.RouteData.Values["id"];
}

@section submenu {left-sidebar-menu-cruds-users}

<div class="row">
    <div class="col-md-6">
        <div class="box box box-primary">
            <div class="box-header with-border">
                <h3 class="box-title">
                    <span>Changing password of <strong>@Model.NameIdentifier</strong></span>
                    <br /><span style="color:red">@ViewBag.Error</span>
                </h3>
            </div>

            @if (@ViewBag.Message != null)
            {
                <div class="box-body">
                    <div class="alert alert-danger alert-dismissible">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                        <h4><i class="icon fa fa-ban"></i> Alert!</h4>

                        <p>
                            @ViewBag.Message
                        </p>

                    </div>
                </div>
            }

            @using (Html.BeginForm("ChangePassword", "User", FormMethod.Post, new { }))
            {
                @Html.AntiForgeryToken()
                <div class="box-body">

                    @Html.ValidationSummary(true)

                    @if (id != null)
                    {
                        @Html.HiddenFor(model => model.Id)
                        @Html.HiddenFor(model => model.NameIdentifier)
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.Password, new { @class = "" })
                        @Html.EditorFor(x => x.Password, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ConfirmPassword, new { @class = "" })
                        @Html.EditorFor(x => x.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                    </div>
                </div>

                <div class="box-footer">
                    @Html.ActionLink("Cancel", "Index", new { }, new { @class = "btn btn-default" })
                    @if (User.HasPermissions("User", "Write"))
                    {
                        <input type="submit" value="Save" class="btn btn-primary pull-right" />
                    }
                </div>
            }
        </div>
    </div>
</div>



@section Scripts {
    <script>
        function show(input) {
            if (input.files && input.files[0]) {
                var filerdr = new FileReader();
                filerdr.onload = function (e) {
                    $('#user_img').attr('src', e.target.result);
                }
                filerdr.readAsDataURL(input.files[0]);
            }
        }

        $(function () {
            //Initialize Select2 Elements
            $('.select2').select2();

            //Datemask dd/mm/yyyy
            $('#datemask').inputmask("dd/mm/yyyy", { "placeholder": "dd/mm/yyyy" });
            //Datemask2 mm/dd/yyyy
            $('#datemask2').inputmask("mm/dd/yyyy", { "placeholder": "mm/dd/yyyy" });
            //Money Euro
            $("[data-mask]").inputmask();

            //Date range picker
            $('#reservation').daterangepicker();
            //Date range picker with time picker
            $('#reservationtime').daterangepicker({ timePicker: true, timePickerIncrement: 30, format: 'MM/DD/YYYY h:mm A' });
            //Date range as a button
            $('#daterange-btn').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
                }
            );

            //iCheck for checkbox and radio inputs
            $('input[type="checkbox"].minimal, input[type="radio"].minimal').iCheck({
                checkboxClass: 'icheckbox_minimal-blue',
                radioClass: 'iradio_minimal-blue'
            });
            //Red color scheme for iCheck
            $('input[type="checkbox"].minimal-red, input[type="radio"].minimal-red').iCheck({
                checkboxClass: 'icheckbox_minimal-red',
                radioClass: 'iradio_minimal-red'
            });
            //Flat red color scheme for iCheck
            $('input[type="checkbox"].flat-red, input[type="radio"].flat-red').iCheck({
                checkboxClass: 'icheckbox_flat-green',
                radioClass: 'iradio_flat-green'
            });

            //Colorpicker
            $(".my-colorpicker1").colorpicker();
            //color picker with addon
            $(".my-colorpicker2").colorpicker();

            //Timepicker
            $(".timepicker").timepicker({
                showInputs: false
            });
        });


    </script>
}
